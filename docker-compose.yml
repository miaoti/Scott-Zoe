version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: couple-website-db
    environment:
      POSTGRES_DB: couple_website
      POSTGRES_USER: couple_user
      POSTGRES_PASSWORD: couple_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - couple-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U couple_user -d couple_website"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: couple-website-backend
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - DATABASE_URL=jdbc:postgresql://db:5432/couple_website?user=couple_user&password=couple_password
      - DATABASE_DRIVER=org.postgresql.Driver
      - DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/couple_website
      - SPRING_DATASOURCE_USERNAME=couple_user
      - SPRING_DATASOURCE_PASSWORD=couple_password
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5173
      - UPLOAD_DIR=/app/uploads
      - PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
    networks:
      - couple-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx for serving frontend and reverse proxy
  frontend:
    image: nginx:alpine
    container_name: couple-website-frontend
    ports:
      - "3000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./client/dist:/usr/share/nginx/html
    depends_on:
      - backend
    networks:
      - couple-network

volumes:
  postgres_data:
  uploads_data:

networks:
  couple-network:
    driver: bridge